'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

// Complete the isValid function below.
function isValid(s) {

    const sObj ={};
    const countObj ={};
    
    for(let i = 0; s.length > i; i++ ) {
        if(sObj[s[i]]) {
            countObj[`${sObj[s[i]]}`] -= 1;
            sObj[s[i]] += 1;
            
            if(countObj[`${sObj[s[i]]}`]) {
                countObj[`${sObj[s[i]]}`] += 1;
            } else {
                countObj[`${sObj[s[i]]}`] = 1;
            }
        } else {
            sObj[s[i]] = 1;
            if(countObj['1']) {
                countObj['1'] += 1;
            } else {
                countObj['1'] = 1;
            }
        }
    }
    
    const values = Object.values(sObj);
    const keys = Object.keys(sObj);
    let setValues = new Set(values)
    setValues= [...setValues]
    
    if(keys.length === 1) return 'YES';
    if(setValues.length === 2) {
        const key1 = setValues[0];
        const key2 = setValues[1];
        if (sObj[key1]==1 && (key1-1==key2 || key1-1==0))
            return 'YES';
        else if (sObj[key2]==1 && (key2-1==key1 || key2-1==0))
             return 'YES';
    }
    console.log({values,keys,setValues})
    return 'NO';
    
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const s = readLine();

    let result = isValid(s);

    ws.write(result + "\n");

    ws.end();
}
