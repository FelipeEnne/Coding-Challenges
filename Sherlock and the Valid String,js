'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

// Complete the isValid function below.
function isValid(s) {

    const sObj ={};
    const countObj ={};
    
    for(let i = 0; s.length > i; i++ ) {
        if(sObj[s[i]]) {
            countObj[`${sObj[s[i]]}`] -= 1;
            sObj[s[i]] += 1;
            
            if(countObj[`${sObj[s[i]]}`]) {
                countObj[`${sObj[s[i]]}`] += 1;
            } else {
                countObj[`${sObj[s[i]]}`] = 1;
            }

        } else {
            sObj[s[i]] = 1;
            if(countObj['1']) {
                countObj['1'] += 1;
            } else {
                countObj['1'] = 1;
            }
        }
    }
    
    const values = Object.values(countObj);
    const keys = Object.keys(countObj);
    let countOne = 0;
    let count = 0;
    let keysValues = [];
        
    for(let i = 0; values.length > i; i++ ) {
                
        if(values[i] > 0) {
            keysValues.push(parseInt(keys[i]))
        }
        
        if(values[i] === 1) {
            countOne ++;
        }
        
        if(values[i] > 1) {
            count ++;
        }
       
    //    console.log(count)
       if(countOne >= 2 || count >= 2){
           return 'NO'
       }
    }
    
    // console.log({countObj, sObj, keysValues})
    // const countKeys = 0;
    for(let i = 0; keysValues.length-1 > i; i++ ) {
                
        if(Math.abs(keysValues[i] - keysValues[i+1]) > 1 && keysValues[i] > 1) {
            return 'NO'
        }
    }
    
    // console.log({countObj, sObj, keysValues})

    return 'YES'
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const s = readLine();

    let result = isValid(s);

    ws.write(result + "\n");

    ws.end();
}
